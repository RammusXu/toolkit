
# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  text/html;


    log_format  main  '$remote_addr - $remote_user - $upstream_cache_status [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';


    access_log  logs/access.log  main;

    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream bk {
        server                        'backend';
        keepalive                     16;
        keepalive_requests            100000;
    }
    upstream bk2 {
        server                        'backend';
        keepalive                     16;
        keepalive_requests            100000;
    }

    proxy_cache_path                /var/cache/nginx levels=1:2 keys_zone=storage:128m inactive=1y max_size=64G;
    proxy_cache                     storage;
    # proxy_cache_valid               200 60s;
    # proxy_cache_valid               404 30s;
    # proxy_cache_valid               any 10s;
    proxy_cache_use_stale           updating;
    proxy_cache_background_update   on;
    proxy_cache_lock                on;
    proxy_cache_lock_age            1s;
    proxy_cache_lock_timeout        1s;




    map $http_origin $cors_origin {
        default               https://rammus.dev;
        "~.*\.rammus\.dev$"    $http_origin;
        "rammus-2020.dev"           $http_origin;
    }

    server {
        listen       80;

        # forward proxy for CONNECT request

        location / {

            proxy_set_header        Host "$host";
            proxy_set_header        X-AA "GGA";
            # proxy_set_header        X-AA "$http_x_aa";

            proxy_pass              http://bk/;
            proxy_cache                     off;
            proxy_cache_key                 frontend.local$uri;
            proxy_cache_convert_head off;


            more_set_headers                "Access-Control-Allow-Origin: $cors_origin";
            # proxy_hide_header               "Cache-Control";
            # add_header                      "Cache-Control" "public, max-age=36000";
        }

        location /proxy_cache_valid {

            proxy_set_header        Host "$host";
            proxy_pass              http://bk$uri;
            proxy_cache_key                 $http_host$uri;

            proxy_cache_valid               200 2s;
        }

        location /host {
            resolver 127.0.0.11;
            proxy_pass              http://$http_host$uri;

            proxy_cache_key                 $http_host$uri;
            proxy_cache_valid               200 60s;

            proxy_intercept_errors          on;
            error_page 502 503 =404 /;
        }


        location /qs/ {
            rewrite ^ https://rammus.cf$uri?test=1 permanent;
        }


        location /if/ {


            set $ram rammus.cf;

            if ( $host = 'app.rammus.cf' ) {
                set $ram app.rammus.cf;

            }

            echo $ram;

        }

        location /oneapi {
            rewrite ^/oneapi/?(.*) /$1?apiKey=tiger break;
            # proxy_pass https://api.somewhere.com$uri$is_args$args;
            proxy_pass              http://bk$uri$is_args$args;
        }

        location /origin {
            echo $http_origin;
        }

        location @host_not_found {
            echo "not found";
        }
    }
}
